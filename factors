#!/usr/bin/python3

"""Factorize digits into an outcome of two smaller digits"""
import sys
import time

PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]

def find_least_prime_factor(n):
    """Find the smallest prime factor of n"""
    for prime in PRIMES:
        if n % prime == 0:
            return prime
        if prime * prime > n:
            return n
    return n

def factorize_digit(digit):
    """Factorize a digit into two smaller digits"""
    if digit <= 1:
        return digit, 1

    least_prime = find_least_prime_factor(digit)
    if least_prime == digit:
        return digit, 1

    second_factor = digit // least_prime
    return second_factor, least_prime

def factorize_file(path):
    """Factorize digits in the provided file into two smaller digits"""
    start_time = time.time()
    try:
        with open(path) as file:
            for line in file:
                n = int(line.strip())
                first_factor, second_factor = factorize_digit(n)
                print("{} = {} * {}".format(n, first_factor, second_factor))

                if time.time() - start_time > 5:
                    print("Execution time exceeded the limit.")
                    break
    except FileNotFoundError:
        print("File '{}' not found.".format(path))
    except ValueError:
        print("Invalid data in the file.")
        sys.exit("Usage: {} <path>".format(sys.argv[0]))

if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.exit("Usage: {} <path>".format(sys.argv[0]))

    factors_file_path = sys.argv[1]

    factorize_file(factors_file_path)
