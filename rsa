#!/usr/bin/python3

import sys
import time
import random


def gcd(a, b):
    """Calculate the greatest common divisor."""
    while b:
        a, b = b, a % b
    return a


def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


def rho_pollard(n):
    """Apply Pollard's Rho algorithm to find a non-trivial factor."""
    if n % 2 == 0:
        return 2

    x = random.randint(1, n-1)
    y = x
    c = random.randint(1, n-1)
    d = 1

    f = lambda x: (x ** 2 + c) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)

    return d if d != n else None


def get_prime_factors(n):
    """Get the prime factors of a number."""
    factors = []
    while n > 1:
        factor = rho_pollard(n)
        if factor:
            factors.append(factor)
            n //= factor
        else:
            factors.append(n)
            break
    return factors


def find_two_primes(n):
    """Find two prime factors of a number."""
    factors = get_prime_factors(n)
    primes = [factor for factor in factors if is_prime(factor)]
    return primes[:2] if len(primes) >= 2 else None


def factorize_file(path):
    """Factorize numbers from a file and print the result."""
    try:
        with open(path) as f:
            for line in f:
                n = int(line.strip())
                primes = find_two_primes(n)
                if primes:
                    print(f"{n}={primes[0]}*{primes[1]}")
                else:
                    print("Unable to find two prime factors.")
                if time.time() - start_time > 5:
                    print("Execution time exceeded the limit.")
                    break
    except FileNotFoundError:
        print(f"File '{path}' not found.")
    except ValueError:
        print("Invalid data in the file.")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.exit(f"Usage: {sys.argv[0]} <path>")

    factors = sys.argv[1]

    start_time = time.time()

    factorize_file(factors)
